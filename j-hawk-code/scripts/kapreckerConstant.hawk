function main ()
{

 //Hell what are you upto
  var number = 6174
  var count = 0
  exec findKapreckerConstant(number , count)

  number = 8765
  count = 0
  exec findKapreckerConstant(number , count)

  number = 3124
  count = 0
  exec findKapreckerConstant(number , count)

  number = 1986
  count = 0
  exec findKapreckerConstant(number , count)

  number = 7634
  count = 0
  exec findKapreckerConstant(number , count)


  number = 2913
  count = 0
  exec findKapreckerConstant(number , count)



}


function findKapreckerConstant(var  number , var count)
{
  echo " number is " + number
  echo " count is " + count 
  var ascDigits [] = `exec sortDigits(number)`
  echo ascDigits
  var descDigits [] = new var []

  var len = `exec SystemModule->length(ascDigits)`

  for(var i = 1 ; i <=len ; i = i+1 )
  {
    var x = ascDigits [len -i +1]
    descDigits [i] =  x
  }
    echo descDigits

  var num1 = `exec createNumber(ascDigits)`

  var num2 = `exec createNumber(descDigits)`

  echo num2
  echo num1
  var diff =   num2 - num1
  echo diff 
  if ( diff == number )
  {
     var tmpCount = count +1
     echo "Found kaprecker constant after  {"+ tmpCount+ "} iteration(s)"
  }
  else
  {
     echo "testing again for "+ diff
     exec findKapreckerConstant(diff, count +1)

  }
 

}
function createNumber ( var digits[])
{

  var sum = 0
  var len = `exec SystemModule->length(digits)`
  
  for(var i = 1 ; i <=len ; i = i+1 )
  {
   
    sum = sum +  digits[i] * `exec  MathModule->pow(10,len -i)`
  }

  return sum
  
}
function sortDigits(var number)
{
  var digits1 [] = `exec splitNumberIntoArray(number)`	
  exec sort(digits1)
  return digits1
}





function splitNumberIntoArray(var number)
{

  var result [] = new var[]
  var i = 1
  do
  {
    var x = number%10
    
 
    result [i] = x
    number = number /10
    number = `exec MathModule->floor(number)`
    
    i = i+1
  }
  while(number > 0 )
  
  result  = `exec reverse(result)`

  return result

}
function reverse( var result[])
{
 
  var len = `exec SystemModule->length(result)` 
  var mid = `exec MathModule->ceil(len /2)`

  for(var i =1 ; i <= mid ; i = i+1)
  {
	var j = len - i +1
	
	var a = result [i]
	//var  b = result[j]
	result[i] = result[j]
	result[j] = a

  }

 return result


}